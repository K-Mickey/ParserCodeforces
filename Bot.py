from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text, state
from aiogram.utils.exceptions import MessageNotModified
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import ConnectDB  # –°–æ–∑–¥–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
import os
import logging
import math
import sys


logging.basicConfig(filename='bot.log', level=logging.INFO, format='[%(asctime)s: %(levelname)s] %(message)s')

BASE_URL = 'codeforces.com'
bot_token = os.getenv('BOT_TOKEN')
if not bot_token:
    logging.critical('bot::not token not available')
    sys.exit('bot token not available')

storage = MemoryStorage()
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=storage)

USER_DATA = {}  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ç–∞ –∑–∞–¥–∞—á


class FormSingleSearch(state.StatesGroup):
    """–§–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    name = state.State()
    rank = state.State()
    notice = state.State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    USER_DATA.clear()
    start_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á'), types.KeyboardButton(text='–ò—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É')]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    text = '–î–∞–≤–∞–π –Ω–∞–π–¥—ë–º —á—Ç–æ –ø–æ—Ä–µ—à–∞—Ç—å! üöÄ'
    await message.answer(text, reply_markup=start_keyboard)


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –≤—ã–≤–æ–¥—è—â–∏–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    await message.answer('–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å Codeforces!\n'
                         '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚ò∫')


@dp.message_handler(Text(contains='–ò—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É'))
async def cmd_get_single(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    single_keyboard = types.ReplyKeyboardMarkup(
        [
            [types.KeyboardButton('–£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')],
            [types.KeyboardButton('–£–∫–∞–∑–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å'), types.KeyboardButton('–£–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')],
            [types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫'), types.KeyboardButton('–ü–æ–∏—Å–∫')]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    data = await state.get_data()
    text = f"–ò–º—è: {data['name'] if 'name' in data else ''}\n" \
           f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['rank'] if 'rank' in data else ''}\n" \
           f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['notice'] if 'notice' in data else ''}\n"
    await message.answer(text, reply_markup=single_keyboard)


@dp.message_handler(Text(contains='–£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'))
async def cmd_single_name(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å–∫–æ–º–æ–π –∑–∞–¥–∞—á–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    await FormSingleSearch.name.set()


@dp.message_handler(state=FormSingleSearch.name)
async def set_single_name(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å–∫–æ–º–æ–π –∑–∞–¥–∞—á–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :return:
    """
    await state.update_data(name=message.text)
    await state.reset_state(with_data=False)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!')
    await cmd_get_single(message, state)


@dp.message_handler(Text(contains='–£–∫–∞–∑–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å'))
async def cmd_single_rank(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–∫–∞–∑–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫–æ–º–æ–π –∑–∞–¥–∞—á–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏')
    await FormSingleSearch.rank.set()


@dp.message_handler(state=FormSingleSearch.rank)
async def set_single_rank(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫–æ–º–æ–π –∑–∞–¥–∞—á–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :return:
    """
    await state.update_data(rank=message.text)
    await state.reset_state(with_data=False)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞!')
    await cmd_get_single(message, state)


@dp.message_handler(Text(contains='–£–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'))
async def cmd_single_notice(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–∫–æ–º–æ–π –∑–∞–¥–∞—á–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏')
    await FormSingleSearch.notice.set()


@dp.message_handler(state=FormSingleSearch.notice)
async def set_single_notice(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–∫–æ–º–æ–π –∑–∞–¥–∞—á–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :return:
    """
    await state.update_data(notice=message.text)
    await state.reset_state(with_data=False)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞!')
    await cmd_get_single(message, state)


@dp.message_handler(Text(contains='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫'))
async def cmd_single_cancel(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    await message.answer('–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ü§´')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(Text(contains='–ü–æ–∏—Å–∫'))
async def cmd_single_search(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    data = await state.get_data()
    if 'name' not in data and 'rank' not in data and 'notice' not in data:
        await message.answer('–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ ü§î')
        await cmd_get_single(message, state)
    elif 'name' not in data:
        await _single_not_have_name_in_data(message, state, data)
    else:
        await _single_have_name_in_data(message, state, data)


async def _single_not_have_name_in_data(message: types.Message, state: FSMContext, data: dict):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    :return:
    """
    db = ConnectDB.ConDB()
    if 'rank' not in data:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE notice_name=%s
        """
        vars = (data['notice'],)
        task_list = db.select(query, vars)
        if len(task_list) == 0:
            await _single_not_found(message, state)
        elif len(task_list) < 20:
            await _single_print_keyboard(message, state, task_list)
        else:
            query = """
            SELECT rank
            FROM codeforces INNER JOIN notice_query USING(id_codeforces)
            INNER JOIN notice USING(id_notice)
            WHERE notice_name=%s
            GROUP BY rank
            """
            rank_list = sorted(str(i[0]) for i in db.select(query, vars) if i[0])
            text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π üòì\n–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞!\n" \
                   f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ–º–æ—â—å üòá\n{', '.join(rank_list)}"
            await message.answer(text)
            await cmd_get_single(message, state)
    elif 'notice' not in data:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE rank=%s
        """
        vars = (data['rank'],)
        task_list = db.select(query, vars)
        if len(task_list) == 0:
            await _single_not_found(message, state)
        elif len(task_list) < 20:
            await _single_print_keyboard(message, state, task_list)
        else:
            query = """
            SELECT notice_name
            FROM codeforces INNER JOIN notice_query USING(id_codeforces)
            INNER JOIN notice USING(id_notice)
            WHERE rank=%s
            GROUP BY notice_name
            """
            rank_list = sorted(i[0] for i in db.select(query, vars) if i[0])
            text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π üòì\n–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞!\n" \
                   f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ø–æ–º–æ—â—å üòá\n{', '.join(rank_list)}"
            await message.answer(text)
            await cmd_get_single(message, state)
    else:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE notice_name=%s AND rank=%s
        """
        vars = (data['notice'], data['rank'])
        task_list = db.select(query, vars)
        if len(task_list) == 0:
            await _single_not_found(message, state)
        else:
            await _single_print_keyboard(message, state, task_list)


async def _single_have_name_in_data(message: types.Message, state: FSMContext, data: dict):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    :return:
    """
    db = ConnectDB.ConDB()
    name = data['name']
    if 'rank' not in data and 'notice' not in data:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE name LIKE %s
        GROUP BY name, rank, link
        """
        vars = ('%' + name + '%',)
    elif 'rank' not in data:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE name LIKE %s AND notice_name LIKE %s
        """
        vars = ('%' + name + '%', '%' + data['notice'] + '%')
    elif 'notice' not in data:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE name LIKE %s AND rank=%s
        GROUP BY name, rank, link
        """
        vars = ('%' + name + '%', data['rank'])
    else:
        query = """
        SELECT name, rank, link
        FROM codeforces INNER JOIN notice_query USING(id_codeforces)
        INNER JOIN notice USING(id_notice)
        WHERE name LIKE %s AND notice_name LIKE %s AND rank=%s
        """
        vars = ('%' + name + '%', '%' + data['notice'] + '%', data['rank'])
    task_list = db.select(query, vars)
    if len(task_list) == 0:
        await _single_not_found(message, state)
    else:
        await _single_print_keyboard(message, state, task_list)


async def _single_not_found(message: types.Message, state: FSMContext):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –æ—Å—Ç—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    text = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ üòØ'
    await message.answer(text)
    await cmd_get_single(message, state)


async def _single_print_keyboard(message: types.Message, state: FSMContext, mapping: list):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –µ—ë –≤—ã–≤–æ–¥–∞
    :param state: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param mapping: –ò—Ç–µ—Ä–∏—Ä—É–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    :return:
    """
    keyboard = types.InlineKeyboardMarkup()
    for task in mapping:
        keyboard.add(types.InlineKeyboardButton(task[0] + ' –°–ª–æ–∂–Ω–æ—Å—Ç—å: ' + str(task[1]), url=BASE_URL + task[2]))
    text = '–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É üòé'
    await message.answer(text, reply_markup=keyboard)


@dp.message_handler(Text(contains='–í—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á'))
async def cmd_get_set(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    db = ConnectDB.ConDB()

    rank_keyboard = types.InlineKeyboardMarkup()
    for i in _get_ranks(db):
        rank_keyboard.add(types.InlineKeyboardButton(text=i, callback_data=f'set_rank_{i}'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏', reply_markup=rank_keyboard)


@dp.callback_query_handler(Text(startswith='set_'))
async def callback_get_set(callback: types.CallbackQuery):
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑—É—é—â–∏–π –æ–±–º–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∑–∞–¥–∞—á –∏–∑ –ë–î
    :param callback: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    action = callback['data'].split('set_', 1)[1]

    if action.startswith('rank'):
        await _get_set_rank(callback, action)
    elif action.startswith('num_'):
        await _get_set_num(callback, action)
    elif action.startswith('n'):
        await _get_set_notice(callback, action)

    await callback.answer()


async def _get_set_rank(callback: types.callback_query, action: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–¥–∞—á
    :param callback: –æ–±—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    :param action: —Å—Ç—Ä–æ–∫–∞ —Å —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–¥–∞—á–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    :return:
    """
    db = ConnectDB.ConDB()

    rank = int(action.split('rank_', 1)[1])
    USER_DATA['rank'] = rank

    notice_keyboard = types.InlineKeyboardMarkup()
    for notice in _get_notices(db, rank):
        notice_keyboard.add(types.InlineKeyboardButton(text=_validate_len_str(notice), callback_data=f'set_n_{notice}'))
    await _update_markup(callback.message, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', notice_keyboard)


async def _get_set_notice(callback: types.callback_query, action: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–µ—Ç–∞ –∑–∞–¥–∞—á
    :param callback: –æ–±—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    :param action: –∑–∞–ø—Ä–æ—Å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∑–∞–¥–∞—á
    :return:
    """
    db = ConnectDB.ConDB()

    notice = action.split('n_', 1)[1]
    USER_DATA['notice'] = notice
    if 'rank' in USER_DATA:
        USER_DATA['data'] = _get_all_sets(db, USER_DATA['rank'], notice)

        num_keyboard = types.InlineKeyboardMarkup()
        count_set = math.ceil(len(USER_DATA['data']) / 10)
        for i in range(1, count_set + 1):
            num_keyboard.add(types.InlineKeyboardButton(text=f'–ù–∞–±–æ—Ä ‚Ññ {i}', callback_data=f'set_num_{i}'))
        await _update_markup(callback.message, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–±–æ—Ä–∞', num_keyboard)
    else:
        logging.error('Bot::_get_set_notice::–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏')
        await callback.message.delete()
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üòâ")
        await cmd_start(callback.message)


async def _get_set_num(callback: types.callback_query, action: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∑–∞–¥–∞—á –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–ø–∏—Å–∫–æ–º —ç—Ç–∏—Ö –∑–∞–¥–∞—á
    :param callback: –æ–±—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    :param action: –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–º–µ—Ä–æ–º —Å–µ—Ç–∞ –∑–∞–¥–∞—á
    :return:
    """
    if 'rank' in USER_DATA and 'notice' in USER_DATA and 'data' in USER_DATA:
        num = int(action.split('num_', 1)[1])

        data = USER_DATA['data']
        start_ind = (num - 1) * 10
        end_ind = min(len(data), start_ind + 10)
        result_set = data[start_ind: end_ind]

        set_keyboard = types.InlineKeyboardMarkup()
        for task in result_set:
            name = task[0]
            url = BASE_URL + task[1]
            set_keyboard.add(types.InlineKeyboardButton(text=_validate_len_str(name), url=url))
        await _update_markup(callback.message, f'–ù–∞–±–æ—Ä ‚Ññ {num}', set_keyboard)
    else:
        logging.error('Bot::_get_set_num::–Ω–∞—Ä—É—à–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î')
        await callback.message.delete()
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üòâ")
        await cmd_start(callback.message)


async def _update_markup(message: types.Message, text: str, markup: types.InlineKeyboardMarkup) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    :param text: –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞–º–µ–Ω–∞
    :param markup: –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    :return:
    """
    print(markup)
    try:
        await message.edit_text(text)
        await message.edit_reply_markup(reply_markup=markup)
    except MessageNotModified as e:
        logging.error(f'Bot::_update_markup::{e}')
        await message.delete()
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üòâ")
        await cmd_start(message)


def _get_ranks(db: ConnectDB.ConDB) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –ë–î —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á
    :param db: –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å PostgreSQL
    :return: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö
    """
    query = """
    SELECT rank
    FROM codeforces INNER JOIN notice_query USING(id_codeforces)
    INNER JOIN notice USING(id_notice)
    GROUP BY rank
    """
    return sorted((i[0] for i in db.select(query) if i[0]))


def _get_notices(db: ConnectDB.ConDB, rank: int) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –ë–î –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á –ø–æ –∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    :param db: –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å PostgreSQL
    :param rank: –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
    :return: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á
    """
    query = """
    SELECT notice_name
    FROM codeforces INNER JOIN notice_query USING(id_codeforces)
    INNER JOIN notice USING(id_notice)
    WHERE rank=%s
    GROUP BY notice_name
    """
    vars = (rank,)
    return sorted((i[0] for i in db.select(query, vars) if i[0]))


def _get_all_sets(db: ConnectDB.ConDB, rank: int, notice: str) -> list:
    """
    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –ë–î –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏
    :param db: –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å PostgreSQL
    :param rank: –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
    :param notice: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏
    :return: –°–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∏—Å–∫–æ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    query = """
    SELECT name, link
    FROM codeforces INNER JOIN notice_query USING(id_codeforces)
    INNER JOIN notice USING(id_notice)
    WHERE rank=%s AND notice_name=%s
    """
    vars = (rank, notice)
    return db.select(query, vars)


def _validate_len_str(value: str) -> str:
    """
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞ –¥–æ 21 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    :param value: –°–ª–æ–≤–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    :return: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    """
    if len(value) > 20:
        value = value[:18] + '..'
    return value


if __name__ == '__main__':
    executor.start_polling(dp)
